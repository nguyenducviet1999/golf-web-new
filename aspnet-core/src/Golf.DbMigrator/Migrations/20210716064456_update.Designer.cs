// <auto-generated />
using System;
using System.Collections.Generic;
using Golf.Domain.Bookings;
using Golf.Domain.Common;
using Golf.Domain.Courses;
using Golf.Domain.Notifications;
using Golf.Domain.Post;
using Golf.Domain.Scorecard;
using Golf.Domain.Shared.Golfer.UserSetting;
using Golf.Domain.Shared.Scorecard;
using Golf.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Golf.DbMigrator.Migrations
{
    [DbContext(typeof(GolfDbContext))]
    [Migration("20210716064456_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Golf.Domain.Bookings.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FullBooking")
                        .HasColumnType("boolean");

                    b.Property<List<int>>("LisExtensionID")
                        .HasColumnType("jsonb");

                    b.Property<int>("MaxPlayer")
                        .HasColumnType("integer");

                    b.Property<double>("MembershipPromotion")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Promotion")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("TeeTime")
                        .HasColumnType("interval");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Golf.Domain.Bookings.Transaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<ContactInfo>("ContactInfo")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GolferID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<int>>("MoreRequests")
                        .HasColumnType("integer[]");

                    b.Property<int>("NumberOfGolfer")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uuid");

                    b.Property<string>("PromotionCode")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("GolferID");

                    b.HasIndex("ProductID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Golf.Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<CourseHole>>("CourseHoles")
                        .HasColumnType("jsonb");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<int>>("Extensions")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MainVersionID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<CourseInformation>>("MoreInformations")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<int>("Par")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("PhotoIDs")
                        .HasColumnType("text");

                    b.Property<List<Tee>>("Tees")
                        .HasColumnType("jsonb");

                    b.Property<int>("TotalHoles")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Golf.Domain.Courses.CourseExtension", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CourseExtensions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Icon = "Common/CourseExtension1",
                            Name = "Hire caddy"
                        },
                        new
                        {
                            ID = 2,
                            Icon = "Common/CourseExtension2",
                            Name = "Rent golf cart"
                        },
                        new
                        {
                            ID = 3,
                            Icon = "Common/CourseExtension3",
                            Name = "Driving range"
                        },
                        new
                        {
                            ID = 4,
                            Icon = "Common/CourseExtension4",
                            Name = "Pro shop"
                        },
                        new
                        {
                            ID = 5,
                            Icon = "Common/CourseExtension5",
                            Name = "Rent clubs"
                        },
                        new
                        {
                            ID = 6,
                            Icon = "Common/CourseExtension6",
                            Name = "Rent shoes"
                        },
                        new
                        {
                            ID = 7,
                            Icon = "Common/CourseExtension7",
                            Name = "Rent umbrella"
                        },
                        new
                        {
                            ID = 8,
                            Icon = "Common/CourseExtension8",
                            Name = "Locker"
                        },
                        new
                        {
                            ID = 9,
                            Icon = "Common/CourseExtension9",
                            Name = "Caddy"
                        },
                        new
                        {
                            ID = 10,
                            Icon = "Common/CourseExtension10",
                            Name = "Golf cart"
                        },
                        new
                        {
                            ID = 11,
                            Icon = "Common/CourseExtension11",
                            Name = "Golf cart surcharge"
                        },
                        new
                        {
                            ID = 12,
                            Icon = "Common/CourseExtension12",
                            Name = "Club house"
                        },
                        new
                        {
                            ID = 13,
                            Icon = "Common/CourseExtension13",
                            Name = "Restaurant"
                        },
                        new
                        {
                            ID = 14,
                            Icon = "Common/CourseExtension14",
                            Name = "Palace"
                        });
                });

            modelBuilder.Entity("Golf.Domain.Courses.CourseReview", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Point")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("Golf.Domain.Courses.Location", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("text");

                    b.Property<GPSAddress>("GPSAddress")
                        .HasColumnType("jsonb");

                    b.Property<string>("HeadOffice")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MainVersionID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Golf.Domain.Courses.MemberShip", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GolferID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("GolferID");

                    b.ToTable("MemberShips");
                });

            modelBuilder.Entity("Golf.Domain.Events.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConvesationID")
                        .HasColumnType("uuid");

                    b.Property<bool>("CourseBookingStatus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("InviteFriend")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("integer");

                    b.Property<string>("MemberIDs")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<bool>("PostNewfeed")
                        .HasColumnType("boolean");

                    b.Property<int>("Privacy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalHoles")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Golf.Domain.GolferData.Golfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("CourseFavorites")
                        .HasColumnType("jsonb");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<double>("Handicap")
                        .HasColumnType("double precision");

                    b.Property<double>("IDX")
                        .HasColumnType("double precision");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<UserSetting>("Setting")
                        .HasColumnType("jsonb");

                    b.Property<double>("StartHandicap")
                        .HasColumnType("double precision");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Golf.Domain.GolferData.Profile", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ClothesSizeType")
                        .HasColumnType("integer");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PantsSize")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int>("PreferredHand")
                        .HasColumnType("integer");

                    b.Property<string>("Quote")
                        .HasColumnType("text");

                    b.Property<int>("ShirtSize")
                        .HasColumnType("integer");

                    b.Property<int>("ShoesSize")
                        .HasColumnType("integer");

                    b.Property<int>("ShoesSizeType")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.Property<string>("Workfield")
                        .HasColumnType("text");

                    b.Property<string>("Workplace")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Golf.Domain.Messages.Conversation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GolferIDs")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("ReaderIDs")
                        .HasColumnType("uuid[]");

                    b.HasKey("ID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Golf.Domain.Messages.Message", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SenderID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConversationID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Golf.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<NotificationObject>>("Objects")
                        .HasColumnType("jsonb");

                    b.Property<NotificationObject>("ReferObject")
                        .HasColumnType("jsonb");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("golferID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("golferID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Golf.Domain.Post.Comment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GolferId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentID")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoID")
                        .HasColumnType("text");

                    b.Property<Guid>("PostID")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("TagIDs")
                        .HasColumnType("jsonb");

                    b.HasKey("ID");

                    b.HasIndex("GolferId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Golf.Domain.Post.Post", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentID")
                        .HasColumnType("uuid");

                    b.Property<string>("PhotoNames")
                        .HasColumnType("text");

                    b.Property<int?>("PostAction")
                        .HasColumnType("integer");

                    b.Property<int>("Privacy")
                        .HasColumnType("integer");

                    b.Property<List<ReferenceObject>>("ReferenceObject")
                        .HasColumnType("jsonb");

                    b.Property<List<Guid>>("TagIDs")
                        .HasColumnType("jsonb");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ParentID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Golf.Domain.Post.PostVote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PostID")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("PostVotes");
                });

            modelBuilder.Entity("Golf.Domain.Post.ReferenceObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WebLink")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ReferenceObject");
                });

            modelBuilder.Entity("Golf.Domain.Report.Report", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReferenceObjectID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ReferenceObjectID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Golf.Domain.Resources.Photo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Golf.Domain.Scorecard.Scorecard", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Achievements>("Achievements")
                        .HasColumnType("jsonb");

                    b.Property<int>("AmountHoles")
                        .HasColumnType("integer");

                    b.Property<int>("BestHole")
                        .HasColumnType("integer");

                    b.Property<double?>("CourseHandicapAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("CourseHandicapBefore")
                        .HasColumnType("double precision");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Grosses")
                        .HasColumnType("integer");

                    b.Property<double?>("HandicapAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("HandicapBefore")
                        .HasColumnType("double precision");

                    b.Property<double>("HandicapDifferential")
                        .HasColumnType("double precision");

                    b.Property<List<Hole>>("Holes")
                        .HasColumnType("jsonb");

                    b.Property<int>("InputType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<List<double>>("ParsAverage")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("RealGrosses")
                        .HasColumnType("double precision");

                    b.Property<double>("System36Handicap")
                        .HasColumnType("double precision");

                    b.Property<Tee>("Tee")
                        .HasColumnType("jsonb");

                    b.Property<int>("TotalConfrimed")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Scorecards");
                });

            modelBuilder.Entity("Golf.Domain.Scorecard.ScorecardVote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GolferID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ScorecardID")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("GolferID");

                    b.HasIndex("ScorecardID");

                    b.ToTable("ScorecardVotes");
                });

            modelBuilder.Entity("Golf.Domain.Shared.System.SystemSetting", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.ToTable("SystemSettings");

                    b.HasData(
                        new
                        {
                            ID = new Guid("875cefd8-6e7d-4f8b-b4aa-f41a0ffe6592")
                        });
                });

            modelBuilder.Entity("Golf.Domain.SocialNetwork.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Golf.Domain.SocialNetwork.GroupMember", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GolferID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<int>("GroupRole")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Golf.Domain.SocialNetwork.Relationship", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FriendID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GolferID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FriendID");

                    b.HasIndex("GolferID");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("Golf.Domain.Tournaments.Tournament", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Fees")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrganizationalUnitName")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TournamentName")
                        .HasColumnType("text");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Golf.Domain.Tournaments.TournamentMember", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GolferID")
                        .HasColumnType("uuid");

                    b.Property<int>("MemberStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TuornamentID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("GolferID");

                    b.HasIndex("TuornamentID");

                    b.ToTable("TournamentMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fda276-af61-4d2d-811a-9492bcd0cd93"),
                            ConcurrencyStamp = "",
                            Name = "System Admin",
                            NormalizedName = "SA"
                        },
                        new
                        {
                            Id = new Guid("abc0fe8d-fb10-49a7-8540-1d67d52c283e"),
                            ConcurrencyStamp = "",
                            Name = "Course Admin",
                            NormalizedName = "CA"
                        },
                        new
                        {
                            Id = new Guid("af85c918-6a22-4bbd-b93b-b89ad793bd09"),
                            ConcurrencyStamp = "",
                            Name = "GSA",
                            NormalizedName = "GSA"
                        },
                        new
                        {
                            Id = new Guid("75148476-66e0-479b-a328-1e0c4da67e5a"),
                            ConcurrencyStamp = "",
                            Name = "Golfer",
                            NormalizedName = "GOLFER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Golf.Domain.Bookings.Product", b =>
                {
                    b.HasOne("Golf.Domain.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Bookings.Transaction", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.Bookings.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Courses.Course", b =>
                {
                    b.HasOne("Golf.Domain.Courses.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.GolferData.Golfer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Courses.MemberShip", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Events.Event", b =>
                {
                    b.HasOne("Golf.Domain.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.GolferData.Golfer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Messages.Message", b =>
                {
                    b.HasOne("Golf.Domain.Messages.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("golferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Post.Comment", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferId");
                });

            modelBuilder.Entity("Golf.Domain.Post.Post", b =>
                {
                    b.HasOne("Golf.Domain.SocialNetwork.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("Golf.Domain.GolferData.Golfer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.Post.Post", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("Golf.Domain.Report.Report", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.Post.ReferenceObject", "ReferenceObject")
                        .WithMany()
                        .HasForeignKey("ReferenceObjectID");
                });

            modelBuilder.Entity("Golf.Domain.Scorecard.Scorecard", b =>
                {
                    b.HasOne("Golf.Domain.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.GolferData.Golfer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Scorecard.ScorecardVote", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.Scorecard.Scorecard", "Scorecard")
                        .WithMany()
                        .HasForeignKey("ScorecardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.SocialNetwork.Relationship", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Tournaments.Tournament", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Golf.Domain.Tournaments.TournamentMember", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.Tournaments.Tournament", "Tuanament")
                        .WithMany()
                        .HasForeignKey("TuornamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Golf.Domain.GolferData.Golfer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Golf.Domain.GolferData.Golfer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
